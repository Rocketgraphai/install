name: Test install.sh

on:
  push:
    branches: [ main, ci-testing ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-install:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04]
        engine: [docker-v2-rootless, docker-v2, docker-v1, docker-pwsh, podman]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Docker Rootless ---
      - name: Install Docker Rootless
        if: matrix.engine == 'docker-v2-rootless'
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y dbus-user-session uidmap systemd-container docker-ce-rootless-extras
          sudo systemctl disable --now docker.service docker.socket
          sudo rm /var/run/docker.sock
          dockerd-rootless-setuptool.sh install
          loginctl enable-linger $(whoami)
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          echo "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" >> "$GITHUB_ENV"
          echo "DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock" >> "$GITHUB_ENV"
          systemctl --user daemon-reload
          systemctl --user start docker

      # --- Docker Compose V1 ---
      - name: Install docker-compose v1 (1.27.0 binary)
        if: matrix.engine == 'docker-v1'
        run: |
          sudo rm /usr/libexec/docker/cli-plugins/docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/download/1.27.0/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # --- PODMAN ---
      - name: Install Podman + podman-compose
        if: matrix.engine == 'podman'
        run: |
          sudo apt-get update
          sudo apt-get remove -y docker-ce docker-ce-cli
          sudo apt-get install -y podman python3-pip
          sudo pip3 install podman-compose
          sudo echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"
          podman --version
          podman-compose --version

      # --- VERIFY ---
      - name: Verify container engine
        run: |
          case "${{ matrix.engine }}" in
            docker-v2|docker-pwsh)
              docker --version
              docker compose version
              ;;
            docker-v1)
              docker --version
              docker-compose --version
              ;;
            podman)
              podman --version
              podman-compose --version
              ;;
          esac
          lsof -v

      - name: Run install script
        run: |
          if [ "${{ matrix.engine }}" = "docker-pwsh" ]; then
            sudo apt-get update
            sudo apt-get install -y powershell
            sudo pwsh ./install.ps1 --no-browser --no-pause
          elif [ "${{ matrix.engine }}" = "docker-v2" ] || [ "${{ matrix.engine }}" = "docker-v1" ]; then
            chmod +x ./install.sh
            sudo ./install.sh
          elif [ "${{ matrix.engine }}" = "docker-v2-rootless" ] || [ "${{ matrix.engine }}" = "podman" ]; then
            chmod +x ./install.sh
            ./install.sh
          fi

      - name: Validate port is listening
        run: |
          PORT=$([ "${{ matrix.engine }}" = "podman" ] || [ "${{ matrix.engine }}" = "docker-v2-rootless" ] && echo 8080 || echo 80)
          sudo ss -ltnp | grep -E ":${PORT}\b" || {
            echo "Port $PORT is not listening"
            exit 1
          }
